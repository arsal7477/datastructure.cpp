//  This program checks if a doubly linked list is a palindrome or not.


#include <iostream>
using namespace std;

class Node {
public:
    char data;
    Node* next;
    Node* prev;
};

// Function to create a new node with given data and insert it at the beginning of the list
void getNode(Node*& head, char new_data) {
    Node* newNode = new Node();
    newNode->data = new_data;
    newNode->next = head;
    newNode->prev = nullptr;
    if (head != nullptr) {
        head->prev = newNode;
    }
    head = newNode;
}

// Function to check if a list starting from 'left' node is a palindrome
bool isPalindrome(Node* left) {
    if (left == nullptr) {
        return true;
    }
    Node* right = left;
    while (right->next != nullptr) {
        right = right->next;
    }
    while (left != right && right != left->prev) {
        if (left->data != right->data) {
            return false;
        }
        left = left->next;
        right = right->prev;
    }
    return true;
}

int main() {
    Node* head = nullptr;
    string str = "madam";
    for (int i = 0; i < str.length(); i++) {
        getNode(head, str[i]);
    }
    if (isPalindrome(head)) {
        cout << "The list is a palindrome." << endl;
    }
    else {
        cout << "The list is not a palindrome." << endl;
    }
    return 0;
}
